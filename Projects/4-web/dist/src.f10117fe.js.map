{"version":3,"sources":["src/views/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;ADAA,IAAA,QAAA;ACEA,ADFA,ICEM,QAAQ,GAAG,IAAI,UAAA,CAAA,QAAJ,CAAa,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAAb,CAAjB;AAEA,ADJA,QCIQ,CAAC,GDJT,GCIA;EDHE,SAAA,QAAA,CAAmB,MAAnB,EAAkC;IAAf,KAAA,MAAA,GAAA,MAAA;EAAmB;;EAEtC,QAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;IACE,OAAO;MACL,gBAAgB,KAAK,aADhB;MAEL,iBAAiB,KAAK;IAFjB,CAAP;EAID,CALD;;EAOA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;IACE,OAAO,CAAC,GAAR,CAAY,qBAAZ;EACD,CAFD;;EAIA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;IACE,OAAO,CAAC,GAAR,CAAY,UAAZ;EACD,CAFD,CAdF,CAkBE;;;EACA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE,OAAO,qHAAP;EAOD,CARD;;EAUA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,QAAX,EAAqC;IACnC;IACA,IAAM,SAAS,GAAG,KAAK,SAAL,EAAlB;;mCACS,UAAQ;MACf;MACM,IAAA,EAAA,GAAwB,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAxB;MAAA,IAAC,SAAS,GAAA,EAAA,CAAA,CAAA,CAAV;MAAA,IAAY,QAAQ,GAAA,EAAA,CAAA,CAAA,CAApB,CAFS,CAGf;MACA;;;MACA,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,OAApC,CAA4C,UAAC,EAAD,EAAG;QAC7C,EAAE,CAAC,gBAAH,CAAoB,SAApB,EAA+B,SAAS,CAAC,QAAD,CAAxC;MACD,CAFD;;;IALF,KAAK,IAAI,QAAT,IAAqB,SAArB,EAA8B;cAArB;IAQR;EACF,CAZD;;EAcA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;IACE,IAAM,eAAe,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAxB;IACA,eAAe,CAAC,SAAhB,GAA4B,KAAK,QAAL,EAA5B;IACA,KAAK,UAAL,CAAgB,eAAe,CAAC,OAAhC;IACA,KAAK,MAAL,CAAY,MAAZ,CAAmB,eAAe,CAAC,OAAnC;EACD,CALD;;EAMF,OAAA,QAAA;AAjDA,CAAA,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export class UserForm {\n  constructor(public parent: Element) {}\n\n  eventsMap(): { [key: string]: () => void } {\n    return {\n      'click:button': this.onButtonClick,\n      'mouseenter:h1': this.onHeaderHover,\n    };\n  }\n\n  onHeaderHover(): void {\n    console.log(`h1 was hovered over`);\n  }\n\n  onButtonClick(): void {\n    console.log('Hi there');\n  }\n\n  // setting up the base template\n  template(): string {\n    return `\n\t\t\t<div>\n\t\t\t\t<h1>User Form</h1>\n\t\t\t\t<input />\n\t\t\t\t<button>Click me</button>\n\t\t\t</div>\n\t\t`;\n  }\n\n  bindEvents(fragment: DocumentFragment): void {\n    // make a copy of the events map\n    const eventsMap = this.eventsMap();\n    for (let eventKey in eventsMap) {\n      // break out eventName against selector\n      const [eventName, selector] = eventKey.split(':');\n      // find every element that matches the selector, then apply the callback\n      // function associated with it\n      fragment.querySelectorAll(selector).forEach((el) => {\n        el.addEventListener(eventName, eventsMap[eventKey]);\n      });\n    }\n  }\n\n  render(): void {\n    const templateElement = document.createElement('template');\n    templateElement.innerHTML = this.template();\n    this.bindEvents(templateElement.content);\n    this.parent.append(templateElement.content);\n  }\n}\n","import { UserForm } from './views/UserForm';\n\nconst userForm = new UserForm(document.getElementById('root') as HTMLElement);\n\nuserForm.render();\n"]}